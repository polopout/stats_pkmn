import streamlit as st
from utils.data import load_data, clean_and_count_column
from utils.viz import generic_multi_bar, generic_bar, generic_pie, generic_multi_pie, wordcloud_plot, sidebar_logo
import plotly.express as px
import pandas as pd
import numpy as np

sidebar_logo()
 
# st.plotly_chart(generic_pie(df, "serie_preferee_wizard"), use_container_width=True)
# st.plotly_chart(generic_multi_bar(df, "jeux_principaux", sep=",", horizontal=True, top_n=10), use_container_width=True)
# st.plotly_chart(generic_bar(df, "anciennete_collection", title="Bar anciennete_collection"), use_container_width=True)
# st.plotly_chart(generic_multi_pie(df, "ta_colonne", sep=",", protected_groups=["Du r√©cent (EV, EB)","Du semi-vintage (SL, XY, NB)"]))

st.set_page_config(page_title="Les analyses", page_icon="üîç", layout="wide")


st.title("Comment consommez vous Pok√©mon ?")
st.markdown(
    """
    <div style="font-size:20px;">
        Cinqui√®me partie - Dans cette section nous allons faire en sorte de faire parler ce qui se cache derri√®re les chiffres, faire des analyses plus pouss√©es sur notre hobby pr√©f√©r√© !
    </div>
    """,
    unsafe_allow_html=True
)
df = load_data()



st.markdown("---")  

st.markdown(
    """
    <div style="font-size:20px;">
        <b>Une histoire de g√©n√©rations ...</b>
    </div>
    """,
    unsafe_allow_html=True
)


# --- ANALYSE 1 : G√©n√©ration d‚Äôarriv√©e vs G√©n√©ration pr√©f√©r√©e ---

# Matrice de correspondance
matrix = pd.crosstab(df["gen_arrivee"], df["gen_preferee"])

# Scores
attraction_scores = (
    matrix.sum(axis=0) / matrix.sum(axis=1).reindex(matrix.columns, fill_value=0).replace(0, np.nan)
).fillna(0)

fidelite_scores = (
    pd.Series(np.diag(matrix), index=matrix.index) / matrix.sum(axis=1)
).fillna(0)

# DataFrames
attraction_df = attraction_scores.reset_index()
attraction_df.columns = ["Generation", "Attraction_Score"]

fidelite_df = fidelite_scores.reset_index()
fidelite_df.columns = ["Generation", "Fidelite_Score"]

# Heatmap
heatmap_fig = px.imshow(
    matrix,
    text_auto=True,
    color_continuous_scale="Viridis",
    labels=dict(x="G√©n√©ration pr√©f√©r√©e", y="G√©n√©ration d‚Äôarriv√©e", color="Nombre"),
    title="Correspondance entre g√©n√©ration d‚Äôarriv√©e et g√©n√©ration pr√©f√©r√©e"
)
heatmap_fig.update_layout(title_font_size=22)

# Barplot attraction
bar_fig = px.bar(
    attraction_df,
    x="Generation",
    y="Attraction_Score",
    text=attraction_df["Attraction_Score"].round(2),
    title="Score d‚Äôattraction des g√©n√©rations",
    labels={"Generation": "G√©n√©ration", "Attraction_Score": "Score d‚Äôattraction"},
)
bar_fig.update_traces(textposition="outside")
bar_fig.update_layout(title_font_size=22, yaxis=dict(range=[0, attraction_df["Attraction_Score"].max() + 0.2]))

# --- Streamlit layout ---
col1, col2, col3 = st.columns([1.3, 1, 1])

with col1:
    st.plotly_chart(heatmap_fig, use_container_width=True)

with col2:
    st.plotly_chart(bar_fig, use_container_width=True)

with col3:
    commentaire = """
    <div style="font-size:20px; line-height:1.6;">
        <br><br>
        Cette heatmap montre les liens entre la g√©n√©ration <b>d‚Äôarriv√©e</b> et la <b>pr√©f√©r√©e</b>.<br><br>
        Le <b>score d‚Äôattraction</b> (graphique de droite) indique √† quel point chaque g√©n√©ration attire des fans 
        d‚Äôautres √©poques :<br><br>
        ‚Ä¢ Un score &gt; 1 = g√©n√©ration tr√®s attractive, qui s√©duit au-del√† de ses arrivants.<br>
        ‚Ä¢ Un score &lt; 1 = g√©n√©ration moins f√©d√©ratrice.<br><br>
        Le <b>score de fid√©lit√©</b> (interne) mesure la proportion de fans rest√©s attach√©s √† leur g√©n√©ration d‚Äôorigine.<br><br>
        Ces deux mesures permettent d‚Äôidentifier les g√©n√©rations ‚Äúfid√®les‚Äù et celles ‚Äús√©ductrices‚Äù.
    </div>
    """
    st.markdown(commentaire, unsafe_allow_html=True)


# --- ANALYSE AUTOMATIQUE TEXTE ---

commentaire = """
<div style="font-size:20px; line-height:1.6;">
    <br><br>
    La <b>2G ressort comme la plus attractive</b>, avec un score de 2.38, ce qui indique qu‚Äôelle attire beaucoup de fans venus d‚Äôautres g√©n√©rations.<br>
    √Ä l‚Äôinverse, la 1G √† ma (notre?) grande surprise est celle qui a perdu le plus de personnes au d√©triment d'autres g√©n√©rations !<br><br>
    Enfin, <b>la 9G est la plus fid√®le</b>, conservant la plus grande part de ses arrivants d‚Äôorigine, 100% !!! (Les hommes mentent, pas les chiffres !).<br>
    L'√©chantillon √©tant tr√®s faible c'est logique, <b>le vrai gagnant est la 4G avec 88.5%</b>, devant la 3G avec 75%.
</div>
"""
st.markdown(commentaire, unsafe_allow_html=True)






st.markdown("---") 

st.markdown(
    """
    <div style="font-size:20px;">
        <b>Situation professionnelle et argent ...</b>
    </div>
    """,
    unsafe_allow_html=True
)


# Introduction explicative
st.markdown(
    """
    <div style="font-size:20px;">
        Cette section vise √† explorer la relation entre la situation professionnelle des collectionneurs (√©tudiant, salari√©, freelance, etc.) et 
        leur budget mensuel d√©di√© √† la collection. 
    </div>
    """,
    unsafe_allow_html=True
)

# --- V√©rification du nom de la colonne situation ---
if "situation" in df.columns:
    col_situation = "situation"
elif "situation_pro" in df.columns:
    col_situation = "situation_pro"
elif "situation_profe" in df.columns:  # fallback si n√©cessaire
    col_situation = "situation_profe"
else:
    st.error("Colonne 'situation' ou 'situation_pro' introuvable dans le DataFrame.")
    st.stop()

# --- Tranches fournies par toi (ordre logique) ---
ordre_tranches_display = [
    "-50‚Ç¨",        # j'interpr√®te comme "<50‚Ç¨"
    "50- 100‚Ç¨",
    "100- 200‚Ç¨",
    "200- 300‚Ç¨",
    "300- 400‚Ç¨",
    "400- 700‚Ç¨",
    "700- 1000‚Ç¨",
    "+ de 1000‚Ç¨"
]

# --- Normalisation des valeurs pour faire correspondre proprement ---
def normalize_budget_label(s):
    if pd.isna(s):
        return ""
    t = str(s).strip()
    # supprimer espaces autour du tiret, enlever espaces inutiles
    t = t.replace(" ", "")
    # standardiser plus/plus de
    t = t.replace("+de", "+de").replace("+De", "+de").replace("plusde", "+de")
    # remplacer variantes comme "+de1000‚Ç¨" -> "+de1000‚Ç¨ (canonical)
    return t

# Canonical keys (sans espaces) et mapping vers l'affichage original
canonical_to_display = {
    "-50‚Ç¨": "-50‚Ç¨",
    "50-100‚Ç¨": "50- 100‚Ç¨",
    "100-200‚Ç¨": "100- 200‚Ç¨",
    "200-300‚Ç¨": "200- 300‚Ç¨",
    "300-400‚Ç¨": "300- 400‚Ç¨",
    "400-700‚Ç¨": "400- 700‚Ç¨",
    "700-1000‚Ç¨": "700- 1000‚Ç¨",
    "+de1000‚Ç¨": "+ de 1000‚Ç¨",
}

# Valeurs moyennes estim√©es pour chaque canonical key (en ‚Ç¨)
canonical_to_value = {
    "-50‚Ç¨": 25,
    "50-100‚Ç¨": 75,
    "100-200‚Ç¨": 150,
    "200-300‚Ç¨": 250,
    "300-400‚Ç¨": 350,
    "400-700‚Ç¨": 550,
    "700-1000‚Ç¨": 850,
    "+de1000‚Ç¨": 1100,
}

# --- Appliquer la normalisation et mapper ---
df_proc = df.copy()

# Normalise : enl√®ve espaces et met en format canonical
df_proc["_budget_norm"] = df_proc["budget_mensuel"].astype(str).apply(lambda x: normalize_budget_label(x))

# On veut transformer ex: "50-100‚Ç¨" vers canonical keys.
# Quelques heuristiques pour reconna√Ætre les formats courants :
def to_canonical(normed):
    if normed == "nan" or normed == "":
        return None
    # remettre le symbole euro si absent (hypoth√®se)
    # D√©tecter formes comme "50-100‚Ç¨" ou "50-100" -> ajouter ‚Ç¨ si besoin
    s = normed
    s = s.replace("EUR", "‚Ç¨")
    # parfois l'utilisateur a gard√© le signe '‚Ç¨', parfois non
    # match known patterns
    for key in canonical_to_display.keys():
        # create comparable key without spaces and with ‚Ç¨ removed for flexible matching
        k_compare = key.replace("‚Ç¨", "").lower()
        s_compare = s.replace("‚Ç¨", "").lower()
        # remove any '+'/ 'de' spacing
        if s_compare == k_compare or s_compare == k_compare.replace("+de", "+de"):
            return key
    # heuristics: if startswith '+' and numbers -> +de1000‚Ç¨
    if s.startswith("+") and "1000" in s:
        return "+de1000‚Ç¨"
    # if pattern like '50-100' or '50-100‚Ç¨'
    import re
    m = re.match(r"^(\d{1,4})-?(\d{1,4})‚Ç¨?$", s)
    if m:
        a = int(m.group(1)); b = int(m.group(2))
        rng = f"{a}-{b}‚Ç¨"
        # map to nearest canonical (handle spaces in canonical keys)
        rng_key = rng.replace("‚Ç¨", "‚Ç¨")
        rng_key = rng_key.replace(" ", "")
        # convert to canonical form like "50-100‚Ç¨"
        cand = f"{a}-{b}‚Ç¨"
        # normalize cand to canonical keys
        cand_norm = cand.replace(" ", "")
        if cand_norm in canonical_to_display:
            return cand_norm
    # fallback: try to remove spaces and match keys (e.g. "50-100‚Ç¨")
    s_nospace = s.replace(" ", "")
    for key in canonical_to_display.keys():
        if s_nospace.lower() == key.replace("‚Ç¨","").lower() or s_nospace.lower() == key.lower():
            return key
    return None

df_proc["_canonical"] = df_proc["_budget_norm"].map(lambda x: to_canonical(x))

# Valeurs non mapp√©es -> on affiche pour debug si n√©cessaire
non_map = df_proc[df_proc["_canonical"].isna()]["budget_mensuel"].unique()
if len(non_map) > 0:
    st.warning(f"Valeurs de 'budget_mensuel' non reconnues (√† v√©rifier) : {list(non_map)}")

# Colonne d'affichage et colonne num√©rique estim√©e
df_proc["budget_display"] = df_proc["_canonical"].map(lambda k: canonical_to_display.get(k) if k is not None else None)
df_proc["budget_estim√©"] = df_proc["_canonical"].map(lambda k: canonical_to_value.get(k) if k is not None else np.nan)

# S'assurer de l'ordre des cat√©gories pour l'affichage
df_proc["budget_display"] = pd.Categorical(df_proc["budget_display"], categories=ordre_tranches_display, ordered=True)

# --- Layout : 2 colonnes pour graphiques ---
colA, colB = st.columns([1, 1])

# Graph 1 : r√©partition empil√©e (stacked) par situation
with colA:
    cross_counts = (
        df_proc.groupby([col_situation, "budget_display"])
        .size()
        .reset_index(name="count")
    )
    # si aucune valeur dans budget_display, on le signale
    if cross_counts["budget_display"].isna().all():
        st.info("Aucune tranche de budget mapp√©e : v√©rifie les valeurs de 'budget_mensuel'.")
    fig = px.bar(
        cross_counts,
        x="count",
        y=col_situation,
        color="budget_display",
        orientation="h",
        category_orders={"budget_display": ordre_tranches_display},
        title="R√©partition des tranches de budget selon la situation professionnelle",
        labels={"count": "Nombre de r√©pondants", col_situation: "Situation professionnelle", "budget_display": "Budget mensuel"},
    )
    fig.update_layout(title_font_size=18, legend_title_text="Budget")
    st.plotly_chart(fig, use_container_width=True)

# Graph 2 : budget moyen estim√© par situation professionnelle
with colB:
    moyenne_par_situation = (
        df_proc.groupby(col_situation)["budget_estim√©"]
        .mean()
        .reset_index()
        .rename(columns={"budget_estim√©": "budget_moyen"})
        .sort_values("budget_moyen", ascending=False)
    )
    if moyenne_par_situation["budget_moyen"].isna().all():
        st.info("Impossible de calculer le budget moyen : aucune tranche mapp√©e en num√©rique.")
    fig2 = px.bar(
        moyenne_par_situation,
        x=col_situation,
        y="budget_moyen",
        text=moyenne_par_situation["budget_moyen"].round(0),
        title="Budget mensuel moyen estim√© par situation professionnelle (‚Ç¨)",
        labels={col_situation: "Situation professionnelle", "budget_moyen": "Budget moyen (‚Ç¨)"},
    )
    fig2.update_traces(texttemplate="%{text:.0f}‚Ç¨", textposition="outside")
    fig2.update_layout(title_font_size=18, xaxis_tickangle=-20)
    st.plotly_chart(fig2, use_container_width=True)

# --- Grand bloc d'analyse en dessous, plein largeur ---

if not moyenne_par_situation.empty and not moyenne_par_situation["budget_moyen"].isna().all():
    situation_max = moyenne_par_situation.iloc[0]
    situation_min = moyenne_par_situation.iloc[-1]

    texte_analyse = f"""
    <div style="font-size:18px; line-height:1.8; text-align:justify;">
        Le premier graphique montre la r√©partition des tranches de budget selon la situation professionnelle : il permet de visualiser la proportion de r√©pondants dans chaque tranche de d√©pense mensuelle pour leur hobby.<br>
        Le second graphique traduit ces tranches en valeurs moyennes estim√©es, pour comparer directement le budget mensuel moyen par cat√©gorie socio-professionnelle.<br><br>
        On observe que les <b>auto-entrepreneurs et freelances sont ceux qui investissent le plus</b>, avec un budget moyen sup√©rieur √† 500 ‚Ç¨ par mois.<br>
        √Ä l‚Äôinverse, les √©tudiants affichent logiquement les budgets les plus faibles, autour de 170‚Äì270 ‚Ç¨.<br><br>
        Ce qui est surprenant, c‚Äôest que les <b>personnes en recherche d‚Äôemploi</b> pr√©sentent un budget moyen sup√©rieur √† celui des √©tudiants et m√™me proche des salari√©s.
    </div>
    """
else:
    texte_analyse = """
    <div style="font-size:18px;">
        Donn√©es insuffisantes pour produire une analyse fiable (aucune tranche mapp√©e).
    </div>
    """

st.markdown(texte_analyse, unsafe_allow_html=True)










st.markdown("---") 
# --- TITRE SECTION ---
st.markdown(
    """
    <div style="font-size:20px;">
        <b>Comment √©volue la collection selon l'anciennet√© ?</b>
    </div>
    """,
    unsafe_allow_html=True
)

# --- PR√âPARATION DES DONN√âES ---

# Exploser les multi-r√©ponses dans collection_type
df_exploded = df.assign(collection_type=df["collection_type"].str.split(",")).explode("collection_type")
df_exploded["collection_type"] = df_exploded["collection_type"].str.strip()

# Croisement anciennet√© √ó type de collection
matrix = pd.crosstab(df_exploded["anciennete_collection"], df_exploded["collection_type"])

# Normalisation pour voir proportions
matrix_prop = matrix.div(matrix.sum(axis=1), axis=0)

# Score d'attraction pour voir quels types de collection attirent selon anciennet√©
attraction_scores = matrix.sum(axis=0) / matrix.sum().sum()

attraction_scores = attraction_scores.fillna(0)
attraction_df = attraction_scores.reset_index()
attraction_df.columns = ["Collection_Type", "Attraction_Score"]

# --- VISUALISATIONS ---

# Heatmap proportionnelle
heatmap_fig = px.imshow(
    matrix_prop,
    text_auto=".2f",
    color_continuous_scale="Viridis",
    labels=dict(x="Type de collection", y="Anciennet√© dans le hobby", color="Proportion"),
    title="Proportion de collection par anciennet√©"
)
heatmap_fig.update_layout(title_font_size=22)

# Barplot attraction
bar_fig = px.bar(
    attraction_df,
    x="Collection_Type",
    y="Attraction_Score",
    text=attraction_df["Attraction_Score"].round(2),
    title="Score d'attraction des types de collection",
    labels={"Collection_Type": "Type de collection", "Attraction_Score": "Score d‚Äôattraction"},
)
bar_fig.update_traces(textposition="outside")
bar_fig.update_layout(title_font_size=22, yaxis=dict(range=[0, attraction_df["Attraction_Score"].max() + 0.2]))

# --- STREAMLIT LAYOUT ---
col1, col2, col3 = st.columns([1.3, 1, 1])

with col1:
    st.plotly_chart(heatmap_fig, use_container_width=True)

with col2:
    st.plotly_chart(bar_fig, use_container_width=True)

with col3:
    commentaire = """
    <div style="font-size:20px; line-height:1.6;">
        <br><br>
        Cette heatmap montre comment chaque <b>anciennet√© dans le hobby</b> se r√©partit sur les diff√©rents types de collection.<br><br>
        Le <b>score d‚Äôattraction</b> (graphique de droite) indique quels types de collection sont les plus ‚Äúpopulaires‚Äù toutes anciennet√©s confondues :<br><br>
        ‚Ä¢ Un score √©lev√© = type de collection qui attire beaucoup de collectionneurs, ind√©pendamment de leur anciennet√©.<br>
        ‚Ä¢ Un score faible = type plus niche ou sp√©cifique √† certaines tranches d‚Äôanciennet√©.<br><br>
        Ces visualisations permettent d‚Äôidentifier si certains types de collection sont r√©serv√©s aux v√©t√©rans ou attirent tous les profils.
    </div>
    """
    st.markdown(commentaire, unsafe_allow_html=True)

# --- CHAMP POUR ANALYSE AUTOMATIQUE ---
# Pr√©parer un texte automatique (exemple basique)
top_collection = attraction_df.sort_values("Attraction_Score", ascending=False).iloc[0]["Collection_Type"]
commentaire_auto = f"""
<div style="font-size:20px; line-height:1.6;">
    <br><br>
    Le type de collection le plus attractif est <b>{top_collection}</b>, ce qui signifie qu‚Äôil attire beaucoup de collectionneurs, quel que soit leur niveau d‚Äôanciennet√©.<br>
    √Ä l‚Äôinverse, certains types comme {', '.join(attraction_df.sort_values("Attraction_Score").head(2)["Collection_Type"].tolist())} semblent plus sp√©cifiques √† certaines tranches d‚Äôanciennet√©.
</div>
"""
st.markdown(commentaire_auto, unsafe_allow_html=True)








st.markdown("---") 

# --- ANALYSE : Profil du collectionneur selon √¢ge, anciennet√© et budget ---

st.markdown(
    """
    <div style="font-size:20px;">
        <b>Profil du collectionneur selon √¢ge, anciennet√© et budget</b>
    </div>
    """,
    unsafe_allow_html=True
)

# --- Nettoyage & pr√©paration des donn√©es ---
df_analyse = df.copy()

# Conversion budget en num√©rique si besoin (ex: "Moins de 50‚Ç¨", "50-100‚Ç¨", etc.)
budget_map = {
    "-50‚Ç¨": 25,
    "50- 100‚Ç¨": 75,
    "100- 200‚Ç¨": 150,
    "200- 300‚Ç¨":250,
    "300- 400‚Ç¨": 350,
    "400- 700":550,
    "700- 1000":850,
    "+ de 1000‚Ç¨": 1300
}
df_analyse["budget_val"] = df_analyse["budget_mensuel"].map(budget_map).fillna(0)

# Remplacement des cat√©gories d‚Äôanciennet√© et √¢ge par un ordre coh√©rent si n√©cessaire
age_order = ["Moins de 14 ans", "14 - 18 ans", "18 - 22 ans", "22 - 26 ans", "26 - 30 ans", "30 - 35 ans","+ 35 ans"]
anciennete_order = ["-1 an", "1 √† 2 ans", "2 √† 4 ans", "4 √† 6 ans", "6 ans ou +"]

df_analyse["age"] = pd.Categorical(df_analyse["age"], categories=age_order, ordered=True)
df_analyse["anciennete_collection"] = pd.Categorical(df_analyse["anciennete_collection"], categories=anciennete_order, ordered=True)

# --- Heatmap √Çge x Anciennet√© ---
heatmap_data = (
    df_analyse.groupby(["age", "anciennete_collection"])["budget_val"]
    .mean()
    .unstack()
)

heatmap_fig = px.imshow(
    heatmap_data,
    color_continuous_scale="Blues",
    text_auto=".1f",
    title="Budget moyen selon √¢ge et anciennet√©",
    labels=dict(color="Budget moyen (‚Ç¨)"),
)
heatmap_fig.update_layout(title_font_size=22)

# --- Barplot Budget moyen par investisseur ---
bar_data = (
    df_analyse.groupby("investisseur")["budget_val"]
    .mean()
    .reset_index()
    .sort_values(by="budget_val", ascending=False)
)

bar_fig = px.bar(
    bar_data,
    x="investisseur",
    y="budget_val",
    text=bar_data["budget_val"].round(0),
    color="budget_val",
    color_continuous_scale="Viridis",
    title="Budget moyen selon le statut d‚Äôinvestisseur",
    labels={"investisseur": "Investisseur", "budget_val": "Budget moyen (‚Ç¨)"},
)
bar_fig.update_traces(textposition="outside")
bar_fig.update_layout(title_font_size=22, showlegend=False)

# --- Affichage Streamlit ---
col1, col2, col3 = st.columns([1.3, 1, 1])

with col1:
    st.plotly_chart(heatmap_fig, use_container_width=True)

with col2:
    st.plotly_chart(bar_fig, use_container_width=True)

with col3:
    commentaire = """
    <div style="font-size:20px; line-height:1.6;">
        <br><br>
        Cette heatmap illustre comment le <b>budget moyen</b> √©volue selon les <b>tranches d‚Äô√¢ge</b> et 
        <b>l‚Äôanciennet√© de collection</b>.<br><br>
        On observe si les collectionneurs les plus exp√©riment√©s ou plus √¢g√©s 
        d√©pensent davantage, ou si les nouveaux arrivants sont plus impulsifs.<br><br>
        Le graphique de droite montre la diff√©rence entre <b>investisseurs</b> et 
        <b>collectionneurs passion</b>.<br><br>
        Une diff√©rence nette sugg√®re une <b>segmentation √©conomique</b> claire entre les profils.
    </div>
    """
    st.markdown(commentaire, unsafe_allow_html=True)

# --- Analyse automatique / texte ---
moy_invest = bar_data.loc[bar_data["investisseur"] == "Oui", "budget_val"].mean()
moy_noninvest = bar_data.loc[bar_data["investisseur"] != "Oui", "budget_val"].mean()

analyse_auto = f"""
<div style="font-size:20px; line-height:1.6;">
    <br><br>
    On observe une <b>corr√©lation positive entre l‚Äôanciennet√© et le budget</b>, 
    surtout √† partir de <b>2 ans d‚Äôanciennet√©</b>.<br>
    Les collectionneurs ayant plus de <b>6 ans d‚Äôexp√©rience</b> affichent les budgets les plus √©lev√©s 
    (par ex. <b>385 ‚Ç¨</b>, <b>412 ‚Ç¨</b>, <b>455 ‚Ç¨</b> selon les tranches d‚Äô√¢ge).<br><br>
    Certains pics atypiques, comme les <b>662 ‚Ç¨ chez les moins de 14 ans</b>, 
    s‚Äôexpliquent probablement par un <b>faible effectif</b> dans cette cat√©gorie et sont donc √† interpr√©ter avec prudence.<br>
    Globalement, les <b>18‚Äì30 ans</b> constituent la tranche la plus active budg√©tairement, 
    souvent associ√©e √† un profil <b>‚Äúpassion + moyens‚Äù</b>.<br>
    Les <b>investisseurs affirm√©s</b> (oui √† 100 %) pr√©sentent le <b>budget moyen le plus √©lev√©</b> 
    (‚âà <b>256 ‚Ç¨</b>), suivis des profils <b>‚Äúmixtes‚Äù</b> (‚âà <b>241 ‚Ç¨</b>) qui √©quilibrent 
    entre plaisir et revente.<br>
    Les <b>non-investisseurs</b> restent nettement en dessous, avec un budget autour de <b>150 ‚Ç¨</b>, 
    soit <b>presque moiti√© moins</b> que les investisseurs.
</div>
"""
st.markdown(analyse_auto, unsafe_allow_html=True)







st.markdown("---") 

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from prince import MCA

# --- TITRE ---
st.markdown(
    """
    <div style="font-size:20px;">
        <b>Analyse des go√ªts selon la g√©n√©ration d‚Äôentr√©e</b>
    </div>
    """,
    unsafe_allow_html=True
)

# --- CHARGEMENT DES DONN√âES ---
colonnes = ["gen_arrivee", "gen_preferee", "bloc_prefere", "jeu_prefere_principal"]
df_acm = df[colonnes].dropna()

# --- ANALYSE DES CORRESPONDANCES MULTIPLES (ACM) ---
mca = MCA(n_components=2, random_state=42)
mca_fit = mca.fit(df_acm)

# Coordonn√©es des modalit√©s
coords_modalites = mca_fit.column_coordinates(df_acm)
coords_modalites["variable"] = [col.split("_")[0] for col in coords_modalites.index]
coords_modalites["modalite"] = [col for col in coords_modalites.index]

# --- VISUALISATION ---
fig, ax = plt.subplots(figsize=(9, 7))
palette = {
    "gen": "#ff7f0e",
    "bloc": "#2ca02c",
    "jeu": "#1f77b4"
}

for var, data in coords_modalites.groupby("variable"):
    ax.scatter(data[0], data[1], label=var, alpha=0.8, s=60, c=palette.get(var, "#7f7f7f"))

for i, row in coords_modalites.iterrows():
    ax.text(row[0] + 0.02, row[1], row["modalite"], fontsize=9)

ax.axhline(0, color="gray", lw=1)
ax.axvline(0, color="gray", lw=1)
ax.set_title("Analyse des Correspondances Multiples (ACM)\nG√©n√©rations, blocs et jeux pr√©f√©r√©s", fontsize=14)

# --- R√âCUP√âRATION DE LA VARIANCE EXPLIQU√âE ---
try:
    inertia = mca_fit.explained_inertia_
except AttributeError:
    try:
        inertia = mca_fit.explained_inertia()
    except Exception:
        # fallback manuel
        eigenvalues = mca_fit.eigenvalues_
        inertia = eigenvalues / eigenvalues.sum()

ax.set_xlabel(f"Dimension 1 ({inertia[0]*100:.1f}%)")
ax.set_ylabel(f"Dimension 2 ({inertia[1]*100:.1f}%)")
ax.legend(title="Variable", bbox_to_anchor=(1.05, 1), loc='upper left')
sns.despine()
st.pyplot(fig)

# --- INTERPR√âTATION ---
st.markdown("### Aide √† l'interpr√©tation :")

analyse_auto = f"""
<div style="font-size:20px; line-height:1.6;">
    - Les points proches repr√©sentent des choix similaires (par ex. ceux arriv√©s √† la 4G pr√©f√®rent souvent les jeux ou blocs de cette p√©riode).  <br>
    - L‚Äôaxe 1 (horizontal) peut traduire un gradient temporel (vintage ‚Üí r√©cent),  <br>
    - L‚Äôaxe 2 (vertical) peut montrer des diff√©rences de styles ou d‚Äôattachement g√©n√©rationnel. 
</div>
"""
st.markdown(analyse_auto, unsafe_allow_html=True)

# --- VARIANCE EXPLIQU√âE ---
st.markdown(f"**Variance expliqu√©e :** {inertia[0]*100:.1f}% par la Dim 1 et {inertia[1]*100:.1f}% par la Dim 2.")
analyse_auto = f"""
<div style="font-size:20px; line-height:1.6;">
    L'analyse rapide : la 4G, la 5G et la 6G sont √† part, mais le reste des blocs se maintiennent entre eux (1-2-3G)
</div>
"""
st.markdown(analyse_auto, unsafe_allow_html=True)





st.markdown("---") 

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# --- Transformation des tranches en valeurs num√©riques ---
boosters_map = {
    "Entre 0 et 5 boosters": 2.5,
    "+ de 5 boosters": 10,
    "+ de 15 boosters": 22.5,
    "+ de 30 boosters": 40,
    "+ de 50 boosters": 75,
    "+ de 100 boosters": 120
}

investissements_map = {
    "-100‚Ç¨": 50,
    "100 - 300‚Ç¨": 200,
    "300 - 500‚Ç¨": 400,
    "500 - 1000‚Ç¨": 750,
    "1000 - 2000‚Ç¨": 1500,
    "2000 - 5000‚Ç¨": 3500,
    "5000 - 10000‚Ç¨": 7500,
    "+ de 10000‚Ç¨": 13000
}

# --- Cr√©ation des colonnes num√©riques ---
df["boosters_num"] = df["boosters_par_mois"].map(boosters_map).fillna(0)
df["valeur_investissements_num"] = df["valeur_investissements"].map(investissements_map).fillna(0)

# --- Regroupement pour comptage des r√©pondants ---
scatter_df = df.groupby(["boosters_num", "valeur_investissements_num", "investisseur"]) \
               .size().reset_index(name='nb_repondants')

# --- Scatter plot ---
scatter_fig = px.scatter(
    scatter_df,
    x="boosters_num",
    y="valeur_investissements_num",
    size="nb_repondants",
    color="investisseur",
    labels={
        "boosters_num": "Boosters ouverts par mois",
        "valeur_investissements_num": "Valeur estim√©e des investissements (‚Ç¨)",
        "investisseur": "Type d'investisseur",
        "nb_repondants": "Nombre de r√©pondants"
    },
    title="Comportement d'ouverture vs investissement",
    size_max=25  # taille max des bulles
)
scatter_fig.update_layout(title_font_size=22)

# --- Streamlit layout ---
st.markdown(
    """
    <div style="font-size:20px;">
        <b>Comportement d‚Äôouverture vs investissement</b>
    </div>
    """,
    unsafe_allow_html=True
)

st.plotly_chart(scatter_fig, use_container_width=True)

# --- Commentaire ---
commentaire = """
<div style="font-size:20px; line-height:1.6;">
    <br><br>
    Chaque point repr√©sente une combinaison entre le <b>nombre de boosters ouverts par mois</b> 
    et la <b>valeur estim√©e des investissements</b>.  
    La <b>taille des points</b> indique le nombre de r√©pondants correspondant √† chaque profil observ√©.<br><br>
    On observe une forte concentration de <b>non-investisseurs</b> (en bleu) dans la partie 
    inf√©rieure gauche du graphique : ils d√©pensent peu et ouvrent un nombre limit√© de boosters, 
    traduisant une pratique plus <b>loisir ou occasionnelle</b> du TCG.<br><br>
    √Ä l‚Äôinverse, les <b>profils investisseurs</b> (en rouge) pr√©sentent logiquement des <b>valeurs d‚Äôinvestissement plus √©lev√©es</b>.  
    Toutefois, m√™me parmi eux, l‚Äôouverture mensuelle reste <b>mod√©r√©e</b> ‚Äî 
    rarement au-del√† de <b>30 boosters par mois</b> ‚Äî sugg√©rant une approche plus <b>s√©lective et orient√©e vers la revente</b> plut√¥t que la consommation massive.<br><br>
    Ce graphique met donc en √©vidence <b>deux comportements bien distincts</b> :  
    une majorit√© de collectionneurs plaisir, et une minorit√© d‚Äôinvestisseurs.
</div>
"""
st.markdown(commentaire, unsafe_allow_html=True)






st.markdown("---") 

import streamlit as st
import pandas as pd
import plotly.express as px

# --- Conversion des avis textuels en scores ---
avis_mapping = {
    "Tr√®s mauvais": 1,
    "Plut√¥t mauvais": 2,
    "Plut√¥t bon": 3,
    "Tr√®s bon": 4
}

# Colonnes d'avis pour les conventions
avis_cols = [
    "avis_convention_prix",
    "avis_convention_exposants",
    "avis_convention_importance",
    "avis_convention_dispo",
    "avis_convention_tarifs",
    "avis_convention_securite"
]

# Transformation en scores num√©riques
for col in avis_cols:
    df[col + "_score"] = df[col].map(avis_mapping)

# Calcul de la moyenne par crit√®re
radar_data = pd.DataFrame({
    "Crit√®re": ["Prix d'entr√©e", "Qualit√© des exposants", "Importance", 
                "Disponibilit√© des produits", "Tarifs sur place", "S√©curit√©"],
    "Score moyen": [df[col + "_score"].mean() for col in avis_cols]
})

# --- Graphique radar ---
radar_fig = px.line_polar(
    radar_data,
    r="Score moyen",
    theta="Crit√®re",
    line_close=True,
    markers=True,
    title="Perception moyenne des conventions TCG"
)
radar_fig.update_traces(fill='toself')
radar_fig.update_layout(title_font_size=22, polar=dict(radialaxis=dict(range=[1,4])))

# --- Streamlit layout ---
st.markdown(
    """
    <div style="font-size:20px;">
        <b>Exp√©rience convention TCG et perception</b>
    </div>
    """,
    unsafe_allow_html=True
)

col1, col2 = st.columns([1.5, 1])

with col1:
    st.plotly_chart(radar_fig, use_container_width=True)

with col2:
    commentaire = """
    <div style="font-size:20px; line-height:1.6;">
        <br><br>
        Ce radar montre la perception moyenne des conventions TCG Pok√©mon selon diff√©rents crit√®res.<br><br>
        ‚Ä¢ Chaque axe correspond √† un crit√®re √©valu√© : <b>Prix d'entr√©e</b>, <b>Qualit√© des exposants</b>, 
          <b>Importance</b>, <b>Disponibilit√© des produits</b>, <b>Tarifs sur place</b>, <b>S√©curit√©</b>.<br>
        ‚Ä¢ Les scores vont de 1 (Tr√®s mauvais) √† 4 (Tr√®s bon).<br><br>
    </div>
    """
    st.markdown(commentaire, unsafe_allow_html=True)

# --- Analyse automatique ---
analyse = f"""
<div style="font-size:20px; line-height:1.6;">
    <br><br>
    Scores moyens par crit√®re :<br>
    ‚Ä¢ <b>Prix d'entr√©e</b> : {radar_data.loc[radar_data['Crit√®re']=="Prix d'entr√©e", 'Score moyen'].values[0]:.2f} / 4<br>
    ‚Ä¢ <b>Qualit√© des exposants</b> : {radar_data.loc[radar_data['Crit√®re']=="Qualit√© des exposants", 'Score moyen'].values[0]:.2f} / 4<br>
    ‚Ä¢ <b>Importance</b> : {radar_data.loc[radar_data['Crit√®re']=="Importance", 'Score moyen'].values[0]:.2f} / 4<br>
    ‚Ä¢ <b>Disponibilit√© des produits</b> : {radar_data.loc[radar_data['Crit√®re']=="Disponibilit√© des produits", 'Score moyen'].values[0]:.2f} / 4<br>
    ‚Ä¢ <b>Tarifs sur place</b> : {radar_data.loc[radar_data['Crit√®re']=="Tarifs sur place", 'Score moyen'].values[0]:.2f} / 4<br>
    ‚Ä¢ <b>S√©curit√©</b> : {radar_data.loc[radar_data['Crit√®re']=="S√©curit√©", 'Score moyen'].values[0]:.2f} / 4<br><br>
</div>
"""
st.markdown(analyse, unsafe_allow_html=True)

analyse_auto = """
<div style="font-size:20px; line-height:1.6;">
    <br><br>
    En moyenne, les conventions TCG obtiennent des <b>notes globalement positives</b>, 
    avec des scores compris entre <b>2.1 et 3.5 sur 4</b>.<br><br>
    Les participants jugent particuli√®rement bien :<br>
    ‚Ä¢ <b>l‚Äôimportance</b> de ces conventions (<b>3.46 / 4</b>), signe qu‚Äôelles sont per√ßues comme essentielles dans la communaut√©.<br>
    ‚Ä¢ <b>la qualit√© des exposants</b> (<b>3.08 / 4</b>) et la <b>disponibilit√© des produits</b> (<b>3.02 / 4</b>), 
    ce qui traduit une offre vari√©e et satisfaisante.<br><br>
    En revanche, certains points m√©ritent d‚Äô√™tre am√©lior√©s :<br>
    ‚Ä¢ <b>les tarifs sur place</b> (<b>2.12 / 4</b>) sont per√ßus comme trop √©lev√©s par de nombreux visiteurs.<br>
    ‚Ä¢ <b>la s√©curit√©</b> obtient la note la plus faible (<b>2.10 / 4</b>), 
    ce qui peut refl√©ter un sentiment de manque de contr√¥le ou d‚Äôorganisation dans les grands √©v√©nements.<br><br>
    Enfin, le <b>prix d‚Äôentr√©e</b> reste jug√© plut√¥t correct (<b>2.73 / 4</b>), 
    pla√ßant le rapport qualit√©-prix dans une zone acceptable.<br><br>
</div>
"""
st.markdown(analyse_auto, unsafe_allow_html=True)

